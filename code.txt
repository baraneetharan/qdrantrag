using System.Globalization;
using CsvHelper;
using Microsoft.Extensions.AI;
using Npgsql;

public class PGVec
{
    private readonly IEmbeddingGenerator<string, Embedding<float>> _embeddingGenerator;
    private List<AUM> records;

    public PGVec(IEmbeddingGenerator<string, Embedding<float>> embeddingGenerator)
    {
        this._embeddingGenerator = embeddingGenerator;
    }

    public async Task<string> GenPGVector(string searchPhrase)
    {
        Console.WriteLine("Get CSV Data as String from GeneratePGVector...");
        try
        {
            string pathToCsvFile = @"D:\baraneetharan\myworks\SemanticKernel\sk31\aum.csv";
            using var reader = new StreamReader(pathToCsvFile);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            records = csv.GetRecords<AUM>().ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reading CSV: {ex.Message}");
            // return null;
        }

        // Convert records to embeddings
        var embeddingTasks = records.Select(record =>
            _embeddingGenerator.GenerateEmbeddingAsync(record.ClientName + " " + record.AssetType));
        var embeddings = await Task.WhenAll(embeddingTasks);

        using (var connection = new NpgsqlConnection("Host=localhost;Username=postgres;Password=Kgisl@12345;Database=skrag"))
        {
            connection.Open();

            // Create table with PGVector column if not exists
            using (var cmd = new NpgsqlCommand("CREATE TABLE IF NOT EXISTS aumvectors (id SERIAL PRIMARY KEY, client_id INT, client_name TEXT, total_aum DECIMAL, asset_type TEXT, allocation DOUBLE PRECISION, annual_fees DECIMAL, vector VECTOR(1536))", connection))
            {
                cmd.ExecuteNonQuery();
            }

            // Insert vectors into PostgreSQL
            using (var transaction = connection.BeginTransaction())
            {
                foreach (var (record, index) in records.Select((value, index) => (value, index)))
                {
                    using (var cmd = new NpgsqlCommand("INSERT INTO aumvectors (client_id, client_name, total_aum, asset_type, allocation, annual_fees, vector) VALUES (@client_id, @client_name, @total_aum, @asset_type, @allocation, @annual_fees, @vector)", connection))
                    {
                        cmd.Parameters.AddWithValue("client_id", record.ClientID);
                        cmd.Parameters.AddWithValue("client_name", record.ClientName);
                        cmd.Parameters.AddWithValue("total_aum", record.TotalAUM);
                        cmd.Parameters.AddWithValue("asset_type", record.AssetType);
                        cmd.Parameters.AddWithValue("allocation", record.Allocation);
                        cmd.Parameters.AddWithValue("annual_fees", record.AnnualFees);
                        cmd.Parameters.AddWithValue("vector", NpgsqlTypes.NpgsqlDbType.Array | NpgsqlTypes.NpgsqlDbType.Double, embeddings[index].Vector.ToArray());

                        // Print the insert query 
                        // Console.WriteLine($"INSERT INTO aumvectors (client_id, client_name, total_aum, asset_type, allocation, annual_fees, vector) VALUES ({record.ClientID}, {record.ClientName}, {record.TotalAUM}, {record.AssetType}, {record.Allocation}, {record.AnnualFees}, {string.Join(",", embeddings[index].Vector)})");
                        // Console.WriteLine($"INSERT INTO aumvectors (client_id, client_name, total_aum, asset_type, allocation, annual_fees, vector) VALUES ({record.ClientID}, {record.ClientName}, {record.TotalAUM}, {record.AssetType}, {record.Allocation}, {record.AnnualFees}, {string.Join(",", embeddings[index].Vector.ToArray())})");

                        try
                        {
                            cmd.ExecuteNonQuery();
                            Console.WriteLine("Record inserted successfully.");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error executing query: {ex.Message}");
                        }
                    }
                }
                transaction.Commit();
            }

            // Now search the searchPhrase vector in PostgreSQL
            var queryEmbedding = await _embeddingGenerator.GenerateEmbeddingVectorAsync(searchPhrase);
            using (var cmd = new NpgsqlCommand("SELECT id, client_name, total_aum, asset_type, allocation, annual_fees, vector <=> @query_vector AS distance FROM aumvectors ORDER BY distance LIMIT 5", connection))
            {
                cmd.Parameters.AddWithValue("query_vector", NpgsqlTypes.NpgsqlDbType.Array | NpgsqlTypes.NpgsqlDbType.Double, queryEmbedding.ToArray());

                // Print the query 
                var queryVectorString = string.Join(",", queryEmbedding.ToArray());
                Console.WriteLine($"Executing query: SELECT id, client_name, total_aum, asset_type, allocation, annual_fees, vector_distance(vector, ARRAY[{queryVectorString}]) AS distance FROM aumvectors ORDER BY distance LIMIT 5");

                using (var reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var id = reader.GetInt32(0);
                        var clientName = reader.GetString(1);
                        var totalAum = reader.GetDecimal(2);
                        var assetType = reader.GetString(3);
                        var allocation = reader.GetDouble(4);
                        var annualFees = reader.GetDecimal(5);
                        var distance = reader.GetDouble(6);

                        Console.WriteLine($"ID: {id}, ClientName: {clientName}, TotalAUM: {totalAum}, AssetType: {assetType}, Allocation: {allocation}, AnnualFees: {annualFees}, Distance: {distance}");
                    }
                }
            }
        }

        return "Vector search completed.";
    }
}